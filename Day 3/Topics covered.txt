script tag

primitive / predefined data types
numbers 12 12.4 - no int float
string //"devsnest"
boolean // true false
undefined
NaN --- 1 - "a" NaN   |   1 - "1" 0
null
Symbol
BigInt


variables
let foo = 10 // used when values can change over a period of time
var firstname = "devsnest" //not used much nowadays

const a = 10 //value cannot be changed 

let a;
a is undefined

Custom data types
Object -- let person = {firstname: "john", age: 30}
access -- person.firstname / person['firstname']
add new value -- person.islearning = true // person['islearning'] = true


Operators in JS
let num1 = 10
let num2 = 20

num1 + num2
num1++
++num1

- , / , %, *

Type conversion
num1.toString() -- '10'
false.toString() - 'false'

Boolean(1) - true, Boolean(any number except 0) - Boolean("aas") - Boolean([]) - truthy values 
Boolean(0) - false - 0, "", NaN, undefined, ()

Type coercion
'john age is' + 30 = 'john age is 30'

1 + "1" - "11"
1 - "1" - 0

"10"*2
20
"10"/2
5
"10"%2
0
"10"+2
'102'
"10"-2
8
"2" - "1"
1
"2" * "10"
20
"2" - "a"
NaN

1 + (-1)
0
1 + "(-1)"
'1(-1)'
"1" + (-1)
'1-1'

//Conditional Operators - result is true or false
2<5
true
2>5
false
2!=5
true
2==5
false
2 <= 5
true
2 >= 5
false
2 == 5
false
2 === 5
false


//flow statements
if else
if (num1>num2){
    console.log(num1 + " is greater than "+ num2)
} else {
    console.log(num2 + " is greater than " + num1)
}
VM2001:4 17 is greater than 10

if elseif else


//ternary Operators

num1 = 5
5
num2 = 2
2
num1>num2 ? num1 : num2
5
num1 = 1
1
num1>num2 ? num1 : num2
2

// if elseif else
undefined
num1>num2 ? "num1 is greater than num2" : num1<num2 ? "num2 is greater than num1" : "both are equal"
'num2 is greater than num1'
num1 = 10
10
num1>num2 ? "num1 is greater than num2" : num1<num2 ? "num2 is greater than num1" : "both are equal"
'num1 is greater than num2'
num2 = 10
10
num1>num2 ? "num1 is greater than num2" : num1<num2 ? "num2 is greater than num1" : "both are equal"
'both are equal'


//Switch statements
num = 50
50
switch(num){
    case 1: console.log("Sunday");
    case 2: console.log("Monday");
    default: console.log("Koi bhi day");
}
VM713:4 Koi bhi day
undefined
switch(num){
    case 1: console.log("Sunday");
    case 2: console.log("Monday");
    default: console.log("Koi bhi day");
}
VM721:4 Koi bhi day
undefined
switch(num){
    case 1: console.log("Sunday");
    case 2: console.log("Monday");
    default: console.log("Koi bhi day");
    case 3: console.log("Tuesday")
}
VM837:4 Koi bhi day
VM837:5 Tuesday
undefined
num = 3
3
switch(num){
    case 1: console.log("Sunday");
    case 2: console.log("Monday");
    default: console.log("Koi bhi day");
    case 3: console.log("Tuesday")
}
VM865:5 Tuesday

Switch using objects
weekdays = {1: "monday", 2:"tuesday", 3:"wednesday", 4:"thursday", 5:"friday", 6:"saturday", 7:"sunday"}
{1: 'monday', 2: 'tuesday', 3: 'wednesday', 4: 'thursday', 5: 'friday', 6: 'saturday', 7: 'sunday'}
weekdays[1]
'monday'
weekdays[2]
'tuesday'



// loops

//while loop
let index = 10
undefined
while (index>0){
    console.log(index);
    index--;}
VM1344:2 10
VM1344:2 9
VM1344:2 8
VM1344:2 7
VM1344:2 6
VM1344:2 5
VM1344:2 4
VM1344:2 3
VM1344:2 2
VM1344:2 1


//do while
undefined
index = 11
11
do{
    console.log(index);
}while(index<=10);
VM192:2 11

//for loops
for(let index=1; index<=10;index++){
    console.log(index)}
VM485:2 1
VM485:2 2
VM485:2 3
VM485:2 4
VM485:2 5
VM485:2 6
VM485:2 7
VM485:2 8
VM485:2 9
VM485:2 10

for(let index=0; index<str.length; index++){
    console.log(str.charAt(index));
}
VM928:2 d
VM928:2 e
VM928:2 v
VM928:2 s
VM928:2 n
VM928:2 e
VM928:2 s
VM928:2 t

//arrays - allows us to define collections of similar datatypes
let a = [1,2,3,4,"a"]
undefined
a
(5) [1, 2, 3, 4, 'a']
const fruits = ["Apple" , "Banana", "Kiwi"]
undefined
fruits
(3) ['Apple', 'Banana', 'Kiwi']
fruits[1]
'Banana'
fruits.join(" ")
'Apple Banana Kiwi'
a[1]= 3
3
a
(5) [1, 3, 3, 4, 'a']
Boolean(undefined)
false
a[6]
undefined
a[6] = 4
4
a
(7) [1, 3, 3, 4, 'a', empty, 4]
a.values
ƒ values() { [native code] }
a.values()
Array Iterator {}[[Prototype]]: Array Iteratornext: ƒ next()Symbol(Symbol.toStringTag): "Array Iterator"[[Prototype]]: Object
b = a.values()
Array Iterator {}
b.next()
{value: 1, done: false}
b.next()
{value: 3, done: false}
b.next()
{value: 3, done: false}
b.next().value
4
b.next().value
'a'
b.next().value
undefined
b.next().value
4
b.next().value
undefined
b.next().value
undefined


let sum = 0
undefined
a = [1,2,3,4]
(4) [1, 2, 3, 4]
4+undefined
NaN
for(let i=0; i<a.length;i++){
    sum += a[i];
}
10
sum
10

//for of loop
for (let num of nums){
    if (num%2==0){
        even.push(num)
    } else {odd.push(num)}}


//array is also an object, it also has its inbuilt functions

even.concat(odd)
(12) ['0', '2', '4', 2, 2, 2, '1', '3', '5', 1, 3, 1]
even.slice(0, 4)
(4) ['0', '2', '4', 2]


even.concat(odd)
(12) ['0', '2', '4', 2, 2, 2, '1', '3', '5', 1, 3, 1]
even.slice(0, 4)
(4) ['0', '2', '4', 2]
even[-1]
undefined
nums
(6) [1, 2, 2, 3, 1, 2]
nums.slice(0)
(6) [1, 2, 2, 3, 1, 2]
nums.slice(1,-2)
(3) [2, 2, 3]
nums.slice(-4)
(4) [2, 3, 1, 2]


https://overapi.com/javascript